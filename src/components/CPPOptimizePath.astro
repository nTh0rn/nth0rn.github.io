---
type Props = {
  url: string;
  width: string;
};

import CodeBlock from "./CodeBlock.astro";

import { runHighlighterWithAstro } from '@astrojs/prism';



---
<style>
    .no-scrollbar::-webkit-scrollbar {
    display: none;
    }
    /* Hide scrollbar for IE, Edge and Firefox */
    .no-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
    }
    .content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(.85,.35,.15,.83);
    }
    pre, ol, li {
    margin: 0;
    padding: 0;
    line-height: 1.1;
  }
</style>
<div class="CPPOptimizePath group cursor-pointer justify-center flex">
  <div class="translate-y-[4px]">
    <div class="peer origin-center absolute dark:invert transition duration-200 w-[40px] h-[40px] group-[.is-selected]:rotate-90 opacity-100 group-[.is-selected]:opacity-0">
      <img width="40" height="40" src="/images/icons/plus.png" alt="down-squared--v2"
        class="w-[40px] h-[40px] m-0"/>
    </div>
    <div class="peer origin-center absolute dark:invert transition duration-200  w-[40px] h-[40px] group-[.is-selected]:rotate-90 rotate-0">
      <img width="42" height="42" src="/images/icons/minus.png" alt="down-squared--v2"
        class="w-[40px] h-[40px] m-0"/>
    </div>
  </div>
  <div class="ml-[50px] border-[#050505] dark:border-[#AAAAAA] rounded border-[1px] inline-block p-2 ">optimizePath() C++ Code</div>

</div>
<div class="content hue-rotate-180 dark:hue-rotate-0 invert dark:invert-0 cursor-auto" id="CPPOptimizePathText">
<p></p>
<pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; padding: 1em"><span style="color: rgb(139, 148, 158); font-weight: 400;">/*
@brief Optimizing the initially found path.
This function iterates through each cell in the path. For each cell, it iterates
backwards from the very end the path and checks whether the initial cell and any
of the cells after can see eachother. If they can, then any cells between them
are erased from the path list and the search restarts until no optimizations can
be made.
*/</span>
<span style="color: rgb(201, 209, 217); font-weight: 400;"><span style="color: rgb(255, 123, 114); font-weight: 400;">void</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">optimizePath</span><span style="color: rgb(201, 209, 217); font-weight: 400;">()</span> </span>&lcub;
    optimizePathRestart: ; <span style="color: rgb(139, 148, 158); font-weight: 400;">//Used if the entire search needs to restart.</span>

    <span style="color: rgb(139, 148, 158); font-weight: 400;">//Iterate forward from the start of the path.</span>
    <span style="color: rgb(255, 123, 114); font-weight: 400;">for</span>(<span style="color: rgb(255, 123, 114); font-weight: 400;">int</span> i = <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>; i &lt; path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>(); i++) &lcub;

        <span style="color: rgb(139, 148, 158); font-weight: 400;">//Iterate backwards from the end of the path.</span>
        <span style="color: rgb(255, 123, 114); font-weight: 400;">for</span>(<span style="color: rgb(255, 123, 114); font-weight: 400;">int</span> j = <span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>; j &lt; path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>(); j++) &lcub;

            <span style="color: rgb(139, 148, 158); font-weight: 400;">//Makes sure it doesn't check past the forward-moving-cell.</span>
            <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span>(path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>() - j &lt;= i+<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>) &lcub;
                <span style="color: rgb(255, 123, 114); font-weight: 400;">break</span>;
            &rcub;

            <span style="color: rgb(139, 148, 158); font-weight: 400;">//Checks whether the cells can see eachother.</span>
            <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span>(<span style="color: rgb(255, 166, 87); font-weight: 400;">canSee</span>(path[i], path[path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>() - j]) || path[i] == path[path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>() - j]) &lcub;
                
                <span style="color: rgb(139, 148, 158); font-weight: 400;">//Erase the cells between 2 cells that see eachother</span>
                path.<span style="color: rgb(255, 166, 87); font-weight: 400;">erase</span>(path.<span style="color: rgb(255, 166, 87); font-weight: 400;">begin</span>()+i+<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>, path.<span style="color: rgb(255, 166, 87); font-weight: 400;">begin</span>()+(path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>() - j));
                <span style="color: rgb(255, 123, 114); font-weight: 400;">goto</span> optimizePathRestart;
            &rcub;
        &rcub;
    &rcub;
&rcub;</pre>
        </div>
<script>
        function lookforCascade(cascClass, textClass) {
          var coll = document.getElementsByClassName(cascClass);
          var i;
          
          for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("mouseup", function() {
              this.classList.toggle("is-selected");
              var content = document.getElementById(textClass);
              if (content.style.maxHeight){
                content.style.maxHeight = null;
              } else {
                content.style.maxHeight = content.scrollHeight + "px";
              } 
            });
            
          }
        }
        
        lookforCascade("CPPOptimizePath", "CPPOptimizePathText");
        
        
    </script>