---
type Props = {
  url: string;
  width: string;
};

import CodeBlock from "./CodeBlock.astro";

import { runHighlighterWithAstro } from '@astrojs/prism';



---
<style>
    .no-scrollbar::-webkit-scrollbar {
    display: none;
    }
    /* Hide scrollbar for IE, Edge and Firefox */
    .no-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
    }
    .content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(.85,.35,.15,.83);
    }
    pre, ol, li {
    margin: 0;
    padding: 0;
    line-height: 1.1;
  }
</style>
<div class="CPPFillPath group cursor-pointer justify-center flex">
  <div class="translate-y-[4px]">
    <div class="peer origin-center absolute dark:invert transition duration-200 w-[40px] h-[40px] group-[.is-selected]:rotate-90 opacity-100 group-[.is-selected]:opacity-0">
      <img width="40" height="40" src="/images/icons/plus.png" alt="down-squared--v2"
        class="w-[40px] h-[40px] m-0"/>
    </div>
    <div class="peer origin-center absolute dark:invert transition duration-200  w-[40px] h-[40px] group-[.is-selected]:rotate-90 rotate-0">
      <img width="42" height="42" src="/images/icons/minus.png" alt="down-squared--v2"
        class="w-[40px] h-[40px] m-0"/>
    </div>
  </div>
  <div class="ml-[50px] border-[#050505] dark:border-[#AAAAAA] rounded border-[1px] inline-block p-2 ">findPath() C++ Code</div>

</div>
<div class="content hue-rotate-180 dark:hue-rotate-0 invert dark:invert-0 cursor-auto" id="CPPFillPathText">
<p></p>
<pre style="font-family:monospace;color: rgb(201, 209, 217); background-color: rgb(13, 17, 23); font-weight: 400; padding: 1em"><span style="color: rgb(139, 148, 158); font-weight: 400;">/**
@brief Finds a path using random movement.
This function begins in the top left of the map and finds a random path to the
goal at the bottom right of the map.
*/</span>
<span style="color: rgb(201, 209, 217); font-weight: 400;"><span style="color: rgb(255, 123, 114); font-weight: 400;">void</span> <span style="color: rgb(210, 168, 255); font-weight: 400;">findPath</span><span style="color: rgb(201, 209, 217); font-weight: 400;">()</span> </span>&lcub;
    vector &lt;<span style="color: rgb(255, 123, 114); font-weight: 400;">int</span>&gt; node = &lcub;<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> + (<span style="color: rgb(255, 166, 87); font-weight: 400;">rand</span>() % (mapH<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>)), <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> + (<span style="color: rgb(255, 166, 87); font-weight: 400;">rand</span>() % (mapW<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>))&rcub;; <span style="color: rgb(139, 148, 158); font-weight: 400;">//The node to be checked</span>
    path.<span style="color: rgb(255, 166, 87); font-weight: 400;">push_back</span>(&lcub;<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>,<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span>&rcub;); <span style="color: rgb(139, 148, 158); font-weight: 400;">//The starting point</span>
    vector &lt;<span style="color: rgb(255, 123, 114); font-weight: 400;">int</span>&gt; goal=&lcub;mapH<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>, mapW<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>&rcub;; <span style="color: rgb(139, 148, 158); font-weight: 400;">//The goal</span>
    <span style="color: rgb(255, 123, 114); font-weight: 400;">int</span> orig_state=<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>; <span style="color: rgb(139, 148, 158); font-weight: 400;">//Holds the original color of cells</span>

    <span style="color: rgb(139, 148, 158); font-weight: 400;">//Loops until the goal is reached</span>
    <span style="color: rgb(255, 123, 114); font-weight: 400;">while</span>(<span style="color: rgb(121, 192, 255); font-weight: 400;">true</span>) &lcub;

        node = &lcub;<span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> + (<span style="color: rgb(255, 166, 87); font-weight: 400;">rand</span>() % (mapH<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>)), <span style="color: rgb(121, 192, 255); font-weight: 400;">2</span> + (<span style="color: rgb(255, 166, 87); font-weight: 400;">rand</span>() % (mapW<span style="color: rgb(121, 192, 255); font-weight: 400;">-3</span>))&rcub;; <span style="color: rgb(139, 148, 158); font-weight: 400;">//Sets what node is to be checked</span>

        <span style="color: rgb(139, 148, 158); font-weight: 400;">//Checks that the node isn't a wall or the same as the previous node</span>
        <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span>(map[node[<span style="color: rgb(121, 192, 255); font-weight: 400;">0</span>]][node[<span style="color: rgb(121, 192, 255); font-weight: 400;">1</span>]] != <span style="color: rgb(121, 192, 255); font-weight: 400;">0</span> &amp;&amp; node != path[path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>()<span style="color: rgb(121, 192, 255); font-weight: 400;">-1</span>]) &lcub;

            <span style="color: rgb(139, 148, 158); font-weight: 400;">//If the goal is in sight, then exit search.</span>
            <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span>(<span style="color: rgb(255, 166, 87); font-weight: 400;">canSee</span>(path[path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>()<span style="color: rgb(121, 192, 255); font-weight: 400;">-1</span>], goal, <span style="color: rgb(121, 192, 255); font-weight: 400;">false</span>)) &lcub;
                <span style="color: rgb(255, 123, 114); font-weight: 400;">break</span>;
            &rcub;

            <span style="color: rgb(139, 148, 158); font-weight: 400;">//If the node is in sight, add it to the path, otherwise revert its color.</span>
            <span style="color: rgb(255, 123, 114); font-weight: 400;">if</span>(<span style="color: rgb(255, 166, 87); font-weight: 400;">canSee</span>(path[path.<span style="color: rgb(255, 166, 87); font-weight: 400;">size</span>()<span style="color: rgb(121, 192, 255); font-weight: 400;">-1</span>], node)) &lcub;
                path.<span style="color: rgb(255, 166, 87); font-weight: 400;">push_back</span>(node);
            &rcub;
        &rcub;
    &rcub;
    
    <span style="color: rgb(139, 148, 158); font-weight: 400;">//Add goal to the very end of path.</span>
    path.<span style="color: rgb(255, 166, 87); font-weight: 400;">push_back</span>(goal);
&rcub;</pre>

</div>
<br>
<script>
        function lookforCascade(cascClass, textClass) {
          var coll = document.getElementsByClassName(cascClass);
          var i;
          
          for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("mouseup", function() {
              this.classList.toggle("is-selected");
              var content = document.getElementById(textClass);
              if (content.style.maxHeight){
                content.style.maxHeight = null;
              } else {
                content.style.maxHeight = content.scrollHeight + "px";
              } 
            });
            
          }
        }
        
        lookforCascade("CPPFillPath", "CPPFillPathText");
        
        
    </script>